// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plans {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Company   Company[]
}

model Company {
  id                 Int           @id @default(autoincrement())
  idExternal         String        @unique @default(cuid())
  name               String
  plan               Plans?        @relation(fields: [planId], references: [id])
  planId             Int?
  initialBalanceDate DateTime
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?
  User               User[]
  Supplier           Supplier[]
  Client             Client[]
  Bank               Bank[]
  Category           Category[]
  Subcategory        Subcategory[]
  Budget             Budget[]
  Project            Project[]
  Document           Document[]
  Account            Account[]
  Transfer           Transfer[]
}

model User {
  id         Int       @id @default(autoincrement())
  idExternal String?    @unique @default(cuid())
  firstName  String
  lastName   String
  nickName   String
  email      String    @unique
  password   String
  company    Company?  @relation(fields: [companyId], references: [id])
  companyId  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String
  cnpj      String
  email     String
  phone     String
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Client {
  id        Int       @id @default(autoincrement())
  name      String
  cnpj      String
  email     String
  phone     String
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
}

model Bank {
  id        Int       @id @default(autoincrement())
  name      String
  balance   Float
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  code        String
  type        String
  company     Company?      @relation(fields: [companyId], references: [id])
  companyId   Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  Subcategory Subcategory[]
  Budget      Budget[]
  Account     Account[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  code       String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  company    Company?  @relation(fields: [companyId], references: [id])
  companyId  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  Account    Account[]
}

model Budget {
  id         Int       @id @default(autoincrement())
  type       String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  date       DateTime
  value      Float
  company    Company?  @relation(fields: [companyId], references: [id])
  companyId  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Project {
  id        Int       @id @default(autoincrement())
  name      String
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
}

model Document {
  id        Int       @id @default(autoincrement())
  name      String
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
}

model Account {
  id            Int          @id @default(autoincrement())
  company       Company?     @relation(fields: [companyId], references: [id])
  companyId     Int?
  type          String
  date          DateTime
  document      Document?    @relation(fields: [documentId], references: [id])
  documentId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  project       Project?     @relation(fields: [projectId], references: [id])
  projectId     Int?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?
  client        Client?      @relation(fields: [clientId], references: [id])
  clientId      Int?
  description   String
  bank          Bank?        @relation(fields: [bankId], references: [id])
  bankId        Int?
  value         Float
  installments  Int
  installment   Float
  dueDate       DateTime
  receivedDate  DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}

model Transfer {
  id            Int       @id @default(autoincrement())
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     Int?
  bankOriginId  Int?
  bankDestinyId Int?
  value         Float
  date          DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}
