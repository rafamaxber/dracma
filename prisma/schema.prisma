// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum Status {
  open
  closed
  canceled
}

enum ProductStatus {
  active
  inactive
  discontinued
  removed
}

enum Role {
  system_admin
  user_admin
  user
  worker
}

model Roles {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  User      User[]
}

model Plans {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Company   Company[]
}

model Unit {
  id               Int                @id @default(autoincrement())
  name             String
  longName         String?
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  Product          Product[]
  ProductFeedstock ProductFeedstock[]
  ProductRecipe    ProductRecipe[]
}

model Company {
  id                 Int        @id @default(autoincrement())
  idExternal         String     @unique @default(cuid())
  name               String
  plan               Plans?     @relation(fields: [planId], references: [id])
  planId             Int?
  initialBalanceDate DateTime
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?
  User               User[]
  Supplier           Supplier[]

  Customer             Customer[]
  Bank                 Bank[]
  Category             Category[]
  Subcategory          Subcategory[]
  Budget               Budget[]
  Project              Project[]
  Document             Document[]
  Account              Account[]
  Transfer             Transfer[]
  ProductCategory      ProductCategory[]
  Product              Product[]
  Product_Category_Map Product_Category_Map[]
  ProductRecipe        ProductRecipe[]
  Feedstock            ProductFeedstock[]
  Order                Order[]
  ProductImages        ProductImages[]
}

model User {
  id         Int       @id @default(autoincrement())
  idExternal String?   @unique @default(cuid())
  firstName  String
  lastName   String
  nickName   String    @unique
  email      String    @unique
  password   String
  company    Company?  @relation(fields: [companyId], references: [id])
  companyId  Int?
  role       Role?     @default(user)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  Order      Order[]
  Roles      Roles[]
}

model Supplier {
  id        Int                @id @default(autoincrement())
  name      String
  cnpj      String?
  email     String?
  phone     String?
  company   Company            @relation(fields: [companyId], references: [id])
  companyId Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?
  Feedstock ProductFeedstock[]
  Product   Product[]
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  cnpj      String?
  email     String?
  phone     String?
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
  Order     Order[]
}

model Bank {
  id        Int       @id @default(autoincrement())
  name      String
  balance   Float
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  code        String
  type        String
  company     Company       @relation(fields: [companyId], references: [id])
  companyId   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  Subcategory Subcategory[]
  Budget      Budget[]
  Account     Account[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  code       String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  Account    Account[]
}

model Budget {
  id         Int       @id @default(autoincrement())
  type       String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  date       DateTime
  value      Float
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Project {
  id        Int       @id @default(autoincrement())
  name      String
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
}

model Document {
  id        Int       @id @default(autoincrement())
  name      String
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Account   Account[]
}

model Account {
  id            Int          @id @default(autoincrement())
  company       Company?     @relation(fields: [companyId], references: [id])
  companyId     Int?
  type          String
  date          DateTime
  document      Document?    @relation(fields: [documentId], references: [id])
  documentId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  project       Project?     @relation(fields: [projectId], references: [id])
  projectId     Int?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?
  customer      Customer?    @relation(fields: [customerId], references: [id])
  customerId    Int?
  description   String
  bank          Bank?        @relation(fields: [bankId], references: [id])
  bankId        Int?
  value         Float
  installments  Int
  installment   Float
  dueDate       DateTime
  receivedDate  DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}

model Transfer {
  id            Int       @id @default(autoincrement())
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     Int?
  bankOriginId  Int?
  bankDestinyId Int?
  value         Float
  date          DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Product {
  id                       Int                    @id @default(autoincrement())
  name                     String
  code                     String?                @unique @default(cuid())
  canBeResold              Boolean?               @default(true)
  price_sell               Float?
  price_cost               Float?
  manufacturer             Boolean?
  barcode                  String?
  status                   ProductStatus?         @default(active)
  quantity                 Int?
  description              String?
  weight                   Float?
  stock                    Boolean?               @default(false)
  stock_min                Int?
  stock_max                Int?
  removeFeedstockFromStock Boolean?               @default(false)
  unit                     Unit?                  @relation(fields: [unitId], references: [id])
  unitId                   Int?
  companyId                Int
  company                  Company                @relation(fields: [companyId], references: [id])
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  deletedAt                DateTime?
  supplierId               Int?
  supplier                 Supplier?              @relation(fields: [supplierId], references: [id])
  productImages            ProductImages[]
  recipe                   ProductRecipe[]
  product_category_map     Product_Category_Map[]
  ProductCategory          ProductCategory[]
  OrderItem                OrderItem[]
}

model ProductCategory {
  id                   Int                    @id @default(autoincrement())
  name                 String
  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  companyId            Int
  company              Company                @relation(fields: [companyId], references: [id])
  product              Product[]
  Product_Category_Map Product_Category_Map[]
}

model Product_Category_Map {
  id         Int             @id @default(autoincrement())
  product    Product         @relation(fields: [productId], references: [id])
  productId  Int
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  company    Company         @relation(fields: [companyId], references: [id])
  companyId  Int
  deletedAt  DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([companyId, productId, categoryId])
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
}

model ProductFeedstock {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  unitId        Int
  quantity      Float
  stockQuantity Float
  supplierId    Int?
  price         Float
  isFeedstock   Boolean         @default(false)
  companyId     Int
  deletedAt     DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  unit          Unit?           @relation(fields: [unitId], references: [id])
  supplier      Supplier?       @relation(fields: [supplierId], references: [id])
  company       Company         @relation(fields: [companyId], references: [id])
  ProductRecipe ProductRecipe[]
}

model ProductRecipe {
  id          Int              @id @default(autoincrement())
  productId   Int
  feedstock   ProductFeedstock @relation(fields: [feedstockId], references: [id])
  feedstockId Int
  quantity    Float
  unit        Unit?            @relation(fields: [unitId], references: [id])
  unitId      Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  product     Product          @relation(fields: [productId], references: [id])
  Company     Company?         @relation(fields: [companyId], references: [id])
  companyId   Int?
}

model Order {
  id          Int         @id @default(autoincrement())
  idExternal  String      @unique @default(cuid())
  status      Status      @default(open)
  seller      User        @relation(fields: [userId], references: [id])
  userId      Int
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  Int
  sendInvoice Boolean     @default(false)
  orderItems  OrderItem[]
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  discount  Float
  note      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
